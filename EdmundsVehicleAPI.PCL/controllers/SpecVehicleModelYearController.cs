/*
 * EdmundsVehicleAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/27/2016
 */
using EdmundsVehicleAPI.PCL.Http.Client;
using EdmundsVehicleAPI.PCL.Http.Request;
using EdmundsVehicleAPI.PCL.Http.Response;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EdmundsVehicleAPI.PCL.Controllers
{
    public partial class SpecVehicleModelYearController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SpecVehicleModelYearController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SpecVehicleModelYearController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SpecVehicleModelYearController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get a vehicle's model year details by providing its vehicle Make and Model niceNames.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="category">Required parameter: Vehicle category (Acceptable values are: "", "4dr Hatchback", "Coupe", "Convertible", "Sedan", "2dr Hatchback", "Wagon", "Regular Cab Pickup", "Extended Cab Pickup", "Crew Cab Pickup", "2dr SUV", "4dr SUV", "Convertible SUV", "Cargo Van", "Passenger Van", "Cargo Minivan", "Passenger Minivan")</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the *Get All Car Makes* endpoint in the Vehicle Makes resource)</param>
        /// <param name="modelNiceName">Required parameter: Car model niceName</param>
        /// <param name="state">Required parameter: The state of the car make (Acceptable values are: "", "new", "used", "future")</param>
        /// <param name="submodel">Required parameter: The vehicle submodel niceName</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetYearsAsync(
                string callback,
                string category,
                string fmt,
                string makeNiceName,
                string modelNiceName,
                string state,
                string submodel,
                string view)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/{modelNiceName}/years");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName },
                { "modelNiceName", modelNiceName }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "category", category },
                { "fmt", fmt },
                { "state", state },
                { "submodel", submodel },
                { "view", view },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of all Model Years and Styles for a specific vehicle by its Make/Model/Year details.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="category">Required parameter: Vehicle category (Acceptable values are: "", "4dr Hatchback", "Coupe", "Convertible", "Sedan", "2dr Hatchback", "Wagon", "Regular Cab Pickup", "Extended Cab Pickup", "Crew Cab Pickup", "2dr SUV", "4dr SUV", "Convertible SUV", "Cargo Van", "Passenger Van", "Cargo Minivan", "Passenger Minivan")</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the Get All Car Makes endpoint in the Vehicle Makes resource)</param>
        /// <param name="modelNiceName">Required parameter: Car model niceName</param>
        /// <param name="submodel">Required parameter: The vehicle submodel niceName</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <param name="year">Required parameter: Car model year</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetV2Async(
                string callback,
                string category,
                string fmt,
                string makeNiceName,
                string modelNiceName,
                string submodel,
                string view,
                string year)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/{modelNiceName}/{year}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName },
                { "modelNiceName", modelNiceName },
                { "year", year }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "category", category },
                { "fmt", fmt },
                { "submodel", submodel },
                { "view", view },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get the total count of car make years for a specific car make and model.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the *Get All Car Makes* endpoint in the Vehicle Makes resource)</param>
        /// <param name="modelNiceName">Required parameter: Car model niceName</param>
        /// <param name="state">Required parameter: The state of the car make (Acceptable values are: "", "new", "used", "future")</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetCountAsync(
                string callback,
                string fmt,
                string makeNiceName,
                string modelNiceName,
                string state,
                string view)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/{modelNiceName}/years/count");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName },
                { "modelNiceName", modelNiceName }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "fmt", fmt },
                { "state", state },
                { "view", view },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

    }
} 