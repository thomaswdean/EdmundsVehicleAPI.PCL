/*
 * EdmundsVehicleAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/27/2016
 */
using EdmundsVehicleAPI.PCL.Http.Client;
using EdmundsVehicleAPI.PCL.Http.Request;
using EdmundsVehicleAPI.PCL.Http.Response;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EdmundsVehicleAPI.PCL.Controllers
{
    public partial class SpecVehicleModelController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SpecVehicleModelController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SpecVehicleModelController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SpecVehicleModelController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get a vehicle model by its Edmunds Vehicle Make and Model niceNames.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="category">Required parameter: Vehicle category (Acceptable values are: "", "4dr Hatchback", "Coupe", "Convertible", "Sedan", "2dr Hatchback", "Wagon", "Regular Cab Pickup", "Extended Cab Pickup", "Crew Cab Pickup", "2dr SUV", "4dr SUV", "Convertible SUV", "Cargo Van", "Passenger Van", "Cargo Minivan", "Passenger Minivan")</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the Get All Car Makes endpoint in the Vehicle Makes resource)</param>
        /// <param name="modelNiceName">Required parameter: Car model niceName</param>
        /// <param name="state">Required parameter: The state of the car make (Acceptable values are: "", "new", "used", "future")</param>
        /// <param name="submodel">Required parameter: The vehicle submodel niceName</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <param name="year">Required parameter: The four-digit year of interest</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetV2Async(
                string callback,
                string category,
                string fmt,
                string makeNiceName,
                string modelNiceName,
                string state,
                string submodel,
                string view,
                int year)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/{modelNiceName}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName },
                { "modelNiceName", modelNiceName }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "category", category },
                { "fmt", fmt },
                { "state", state },
                { "submodel", submodel },
                { "view", view },
                { "year", year },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a list of car models for a specific car make by the make's niceName.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="category">Required parameter: Vehicle category (Acceptable values are: "", "4dr Hatchback", "Coupe", "Convertible", "Sedan", "2dr Hatchback", "Wagon", "Regular Cab Pickup", "Extended Cab Pickup", "Crew Cab Pickup", "2dr SUV", "4dr SUV", "Convertible SUV", "Cargo Van", "Passenger Van", "Cargo Minivan", "Passenger Minivan")</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the Get All Car Makes endpoint in the Vehicle Makes resource)</param>
        /// <param name="state">Required parameter: The state of the car make (Acceptable values are: "", "new", "used", "future")</param>
        /// <param name="submodel">Required parameter: The vehicle submodel niceName</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <param name="year">Required parameter: The four-digit year of interest</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetModelsAsync(
                string callback,
                string category,
                string fmt,
                string makeNiceName,
                string state,
                string submodel,
                string view,
                int year)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/models");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "category", category },
                { "fmt", fmt },
                { "state", state },
                { "submodel", submodel },
                { "view", view },
                { "year", year },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// Get car models count for a specific car make.
        /// </summary>
        /// <param name="callback">Required parameter: The callback function that the JSON response will be wrapped in if desired</param>
        /// <param name="category">Required parameter: Vehicle category (Acceptable values are: "", "4dr Hatchback", "Coupe", "Convertible", "Sedan", "2dr Hatchback", "Wagon", "Regular Cab Pickup", "Extended Cab Pickup", "Crew Cab Pickup", "2dr SUV", "4dr SUV", "Convertible SUV", "Cargo Van", "Passenger Van", "Cargo Minivan", "Passenger Minivan")</param>
        /// <param name="fmt">Required parameter: Response format (json only) (Acceptable values are: "json")</param>
        /// <param name="makeNiceName">Required parameter: Car make niceName (you get the niceName from the Get All Car Makes endpoint in the Vehicle Makes resource)</param>
        /// <param name="state">Required parameter: The state of the car make (Acceptable values are: "", "new", "used", "future")</param>
        /// <param name="submodel">Required parameter: The vehicle submodel niceName</param>
        /// <param name="view">Required parameter: The response payload (Acceptable values are: "", "basic", "full")</param>
        /// <param name="year">Required parameter: The four-digit year of interest</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetCountAsync(
                string callback,
                string category,
                string fmt,
                string makeNiceName,
                string state,
                string submodel,
                string view,
                int year)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/api/vehicle/v2/{makeNiceName}/models/count");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "makeNiceName", makeNiceName }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "callback", callback },
                { "category", category },
                { "fmt", fmt },
                { "state", state },
                { "submodel", submodel },
                { "view", view },
                { "year", year },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

    }
} 